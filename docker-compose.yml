version: '3.8'

services:
  # Bot de Sinais
  signal-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto-signal-bot
    restart: unless-stopped
    command: ["python", "bots/signal_bot_runner.py"]
    environment:
      - BOT_TYPE=signal
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./config:/app/config
    networks:
      - crypto-bots-network
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.path.append('/app'); from src.core.coinbase_client import CoinbaseClient; client = CoinbaseClient(); exit(0 if client.test_connection() else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Bot de Trading
  trading-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto-trading-bot
    restart: unless-stopped
    command: ["python", "bots/trading_bot_runner.py", "--dry-run"]
    environment:
      - BOT_TYPE=trading
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./config:/app/config
    networks:
      - crypto-bots-network
    depends_on:
      - signal-bot
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.path.append('/app'); from src.core.coinbase_client import CoinbaseClient; client = CoinbaseClient(); exit(0 if client.test_connection() else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis para cache e comunicação entre bots (opcional)
  redis:
    image: redis:7-alpine
    container_name: crypto-bots-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-cryptobots123}
    volumes:
      - redis-data:/data
    networks:
      - crypto-bots-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Prometheus para métricas (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: crypto-bots-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - crypto-bots-network
    profiles:
      - monitoring

  # Grafana para visualização (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: crypto-bots-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - crypto-bots-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Nginx para proxy reverso e dashboard (opcional)
  nginx:
    image: nginx:alpine
    container_name: crypto-bots-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/html:/usr/share/nginx/html
    ports:
      - "80:80"
      - "443:443"
    networks:
      - crypto-bots-network
    depends_on:
      - grafana
    profiles:
      - web

networks:
  crypto-bots-network:
    driver: bridge
    name: crypto-bots-network

volumes:
  redis-data:
    name: crypto-bots-redis-data
  prometheus-data:
    name: crypto-bots-prometheus-data
  grafana-data:
    name: crypto-bots-grafana-data

